/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <string>
#include <sdktools>
#include <tf2>
#include <sdkhooks>[dg
#include <tf2_stocks>
#include <adt_trie>

#define TEST_MODE 0


#define RED_TEAM 2
#define BLU_TEAM 3


//in tf2_stocks
#define TF2_PLAYERCOND_DISGUISING			(1<<2)
#define TF2_PLAYERCOND_DISGUISED    	    (1<<3)
#define TF2_PLAYERCOND_SPYCLOAK				(1<<4) 

 
#define DG_SPRITE_RED_VTF 	"materials/dg/DG_red.vtf"
#define DG_SPRITE_RED_VMT 	"materials/dg/DG_red.vmt"
#define DG_SPRITE_BLU_VTF 	"materials/dg/DG_blu.vtf"
#define DG_SPRITE_BLU_VMT 	"materials/dg/DG_blu.vmt"
new DrinkListStart[MAXPLAYERS + 1];
new TotalDrinks[MAXPLAYERS + 1];
new BuildingDrinks[MAXPLAYERS + 1];
new DeadRingerDrinks[MAXPLAYERS + 1];
new Handle:Weapons = INVALID_HANDLE;
new Handle:BalanceTimer = INVALID_HANDLE;

enum Eweapon
{
	wepMult,
	wepName[40],
};

//Stinky Petes half-birthday!
new String:UpdateDate[] = "10/29/2014";
new Handle:db = INVALID_HANDLE;

new String: msgColor[] = "\x04[DG]";


new g_EntList[MAXPLAYERS + 1];
new g_EntParentList[MAXPLAYERS + 1];   
new gVelocityOffset;

new Handle:g_hStatsURL;
new Handle:g_hRulesURL;

public Plugin:myinfo = 
{
	name = "Drinking game plugin",
	author = "Jesse Young (CodeMonkey)",
	description = "Sends players with [DG] in their name a message when they should drink",
	version = "2.0",
	url = "http://www.team-brh.com"
}

public OnPluginStart()
{
	HookEvent("player_death", Event_PlayerDeath);
	HookEvent("teamplay_round_win",Event_Round_Win);
	HookEvent("object_destroyed",SentryDeath);
	HookEvent("player_spawn",Event_PlayerSpawn);
	HookEvent("player_changename",Change_Name);
	HookEvent("teamplay_round_start",Round_Start);
	RegConsoleCmd("say",Command_Say);
	RegConsoleCmd("dg_update",Update);
	RegConsoleCmd("dg_reloadmelee",LoadWepMults);
	RegConsoleCmd("dg_random", RandomDG);
	RegAdminCmd("dg_balance", DGBalance, ADMFLAG_GENERIC);
	
	
	
	g_hStatsURL = CreateConVar("dg_statsurl", "http://stats.team-brh.com/dg", "Web location where DGers can view their stats");
	g_hRulesURL = CreateConVar("dg_rulesurl", "http://www.team-brh.com/forums/viewtopic.php?f=8&t=7666", "Web location where rules are posted for when a player types dg_info in chat");


	//For findtarget
	LoadTranslations("common.phrases");
	
	LoadSQL();
	LoadWepMults(0,0);
	
	
	gVelocityOffset = FindSendPropInfo("CBasePlayer", "m_vecVelocity[0]");
	


}

public OnPluginEnd() {
	//Kill all sprites on end
	for(new i = 1; i <= MaxClients; i++)
	{
		KillSprite(i);
	}
}

public OnConfigsExecuted() {
    if(TEST_MODE) return;
	PrecacheSound("vo/burp05.wav");
	
}

//is player DG for the purposes of causing drinks
public bool:causesDrinks(playerName) {
        if(StrContains(playerName,"[DG]",false) != -1) {
            return true;
        }
        if(StrContains(playerName,"[SG]",false) != -1) {
            return true;
        }
        if(StrContains(playerName,"[DCG]",false) != -1) {
            return true;
        }
        if(StrContains(playerName,"[SCG]",false) != -1) {
            return true;
        }
        return false;
}

//is player DG for the purposes of receiving drinks
public bool:mayDrink(playerName) {
        if(StrContains(playerName,"[DG]",false) != -1) {
            return true;
        }
        if(StrContains(playerName,"[SG]",false) != -1) {
            return true;
        }
        return false;
} 

//is player DCG for the purposes of receiving drinks
public bool:willDrink(playerName) {
        if(StrContains(playerName,"[DCG]",false) != -1) {
            return true;
        }
        if(StrContains(playerName,"[SCG]",false) != -1) {
            return true;
        }
        return false;
} 

public OnMapStart() {
    if(TEST_MODE) return;
	PrecacheGeneric(DG_SPRITE_RED_VMT, true);
	AddFileToDownloadsTable(DG_SPRITE_RED_VMT);
	PrecacheGeneric(DG_SPRITE_RED_VTF, true);
	AddFileToDownloadsTable(DG_SPRITE_RED_VTF);
	
	PrecacheGeneric(DG_SPRITE_BLU_VMT, true);
	AddFileToDownloadsTable(DG_SPRITE_BLU_VMT);
	PrecacheGeneric(DG_SPRITE_BLU_VTF, true);
	AddFileToDownloadsTable(DG_SPRITE_BLU_VTF);
}

public LoadSQL() {
    
	if(TEST_MODE) return;
	new String:error[255]
	db = SQL_Connect("DGGame", true, error, sizeof(error))
	
	 
	if (db == INVALID_HANDLE)
	{
		PrintToServer("Could not connect: %s", error);
		return;
	}

}
public Action:LoadWepMults(client,args) {
	if(TEST_MODE) return Plugin_Handled ;
	if (Weapons != INVALID_HANDLE)
		CloseHandle(Weapons);
	 
	SQL_LockDatabase(db);
	new Handle:query = SQL_Query(db, "SELECT weapon,mult FROM dgwepmults");
	SQL_UnlockDatabase(db);
	Weapons = CreateTrie();
	
	
	while (SQL_FetchRow(query))
	{
		new _:weaponinfo[Eweapon];
		
		SQL_FetchString(query, 0, weaponinfo[wepName], sizeof(weaponinfo[wepName]));
		weaponinfo[wepMult] = SQL_FetchInt(query,1);
		SetTrieValue(Weapons,weaponinfo[wepName],weaponinfo[0]);
	}
	
	
	if (client != 0)
		ReplyToCommand(client,"Melee weapons reloaded successfully");
	
	return Plugin_Handled;

}

public Action:RandomDG(client, args) {
	new String:text[200];
	GetCmdArgString(text,sizeof(text));
	StripQuotes(text);
	
	new intNum = StringToInt(text);
	
	
	new max_clients = GetMaxClients() +1;
	//Loop through all clients
	new i = 0;
	new clients = 0;
	while (i++ < max_clients && clients < intNum) {
		//Make sure client is connected
		if (!IsClientInGame(i))
			continue;
		
		
		//Get player Name
		new String:playerName[64];
		GetClientName(i, playerName,sizeof(playerName));
		
		
		if (causesDrinks(playerName))
			continue;
		
		

		ServerCommand("sm_rename \"%s\" \"%s[DG]\"", playerName, playerName);
		clients++;

	}
	if (client != 0)
		ReplyToCommand(client, "DGers added");
	return Plugin_Handled;
}

public Round_Start(Handle:event, const String:name[], bool:dontBroadcast) {
	if (BalanceTimer != INVALID_HANDLE) {
		CloseHandle(BalanceTimer);
		BalanceTimer = INVALID_HANDLE;
	}
	BalanceTimer = CreateTimer(5.0,CallBalance);
}
public Action:CallBalance(Handle:timer) {
	BalanceTimer = INVALID_HANDLE;
	DGBalance(0,0);	
}

public Action:Command_Say(client,args) {

	new String:text[200];
	GetCmdArgString(text,sizeof(text));
	StripQuotes(text);
	//Just leave if the console says something
	if (client == 0)
		return Plugin_Continue;
	
	//Get the first argument and index of other argument
	new String:cmd[32];
	new nextCmd = BreakString(text,cmd,sizeof(cmd));
	if (cmd[0] == '!')
		strcopy(cmd[0],sizeof(cmd),cmd[1]);
	
	new String:steamID[32];
	GetClientAuthString(client,steamID,sizeof(steamID))
	
	if (StrEqual(cmd,"dg_drinklist",false))
		ReadList(client,0);
	if (StrEqual(cmd,"dg_mytaunt",false)) {
		new String:tag[100];
		GetTaunt(steamID,tag,sizeof(tag),true);
		PrintToChat(client,"%s%s",msgColor,tag);
	}
	if (StrEqual(cmd,"dg_settaunt",false)) {
		
		if (nextCmd == -1)
			PrintToChat(client,"%sYou must specify a taunt to set",msgColor)
		else {
			new String:taunt[50];
			strcopy(taunt,51,text[nextCmd]);
			if (SetTaunt(steamID,text[nextCmd])) {
				GetTaunt(steamID,taunt,sizeof(taunt),true);
				PrintToChat(client,"%staunt added: '%s'",msgColor,taunt)
			} else
				PrintToChat(client, "%sThere was an error adding this taunt (tell CodeMonkey)",msgColor);
			
		}
	}
	
	new String:forumPost[300];
	GetConVarString(g_hRulesURL,forumPost,sizeof(forumPost));
	
	if (StrEqual(cmd,"dg_info",false))
		ShowMOTDPanel(client,"DG Rules",forumPost,MOTDPANEL_TYPE_URL);
	
	if (StrEqual(cmd,"dg_stats",false)){
		new String: blank[255];
		if (nextCmd == -1)
			DGStats(client, blank);
		else
			DGStats(client, text[nextCmd]);		
	}
	
	
	if (StrContains(text, "dg",false) != -1 || StrContains(text, "dcg",false) != -1 
	 || StrContains(text, "sg",false) != -1 || StrContains(text, "scg",false) != -1) {
		if (StrContains(text, "what is",false) != -1)
			ShowMOTDPanel(client,"DG Rules",forumPost,MOTDPANEL_TYPE_URL);
		else if (StrContains(text, "wat is",false) != -1)
			ShowMOTDPanel(client,"DG Rules",forumPost,MOTDPANEL_TYPE_URL);
		else if (StrContains(text, "wtf is",false) != -1)
			ShowMOTDPanel(client,"DG Rules",forumPost,MOTDPANEL_TYPE_URL);
		else if (StrContains(text, "why do you have",false) != -1)
			ShowMOTDPanel(client,"DG Rules",forumPost,MOTDPANEL_TYPE_URL);
		else if (StrContains(text, "how to",false) != -1)
			ShowMOTDPanel(client,"DG Rules",forumPost,MOTDPANEL_TYPE_URL);
		else if (StrContains(text, "how do",false) != -1)
			ShowMOTDPanel(client,"DG Rules",forumPost,MOTDPANEL_TYPE_URL);
		
		
	}

	return Plugin_Continue;
}

public Event_PlayerDeath(Handle:event, const String:name[], bool:dontBroadcast) {
	
	
	new bool:buildingDeath = StrEqual(name,"object_destroyed",false);
	
	//Get user ids of people that the event happend to
	new victim_id = GetEventInt(event, "userid")
	new attacker_id = GetEventInt(event, "attacker")
	new assister_id = GetEventInt(event,"assister")
	
	
	//Get their client indexs
	new victim = GetClientOfUserId(victim_id);
	new attacker = GetClientOfUserId(attacker_id);
	new assister = GetClientOfUserId(assister_id);
	
	if (victim == 0)
		return;
	
	
	new flags = 0;
	if (!buildingDeath) {
		flags = GetEventInt(event,"death_flags")
		
		//Only kill the sprite if its a player death
		KillSprite(GetClientOfUserId(GetEventInt(event, "userid")));
	}
	
	
	
	//Get weapon that caused death
	new String:WeaponName[128];
	GetEventString(event,"weapon",WeaponName, 128);
	
	
	//Get their names
	new String:vicName[50];
	new String:attackName[50];
	new String:assistName[50];
	
	GetClientName(victim, vicName,sizeof(vicName))
	GetClientName(attacker, attackName,sizeof(attackName))
	GetClientName(assister, assistName,sizeof(assistName))
	
	//See whos playin DG
	new bool:vicDCG = willDrink(vicName);
	new bool:vicDG  = mayDrink (vicName);
	new bool:atDG   = causesDrinks(attackName);
	new bool:asDG   = causesDrinks(assistName);
	

	//Exit if vic isnt DGin
	if (!vicDG && !vicDCG)
		return;
	
	new Handle:myPanel = CreatePanel();
	new String:panelBuffer[100];
	
	/* --Broken, fix later--
	//Suicide is 2 drinks
	if (victim_id == attacker_id) {
		TotalDrinks[victim] += 2;
		PrintCenterText(victim,"DRINK TWO BITCH");
		PrintToChat(victim,"%sYou're an idiot, drink 2",msgColor);	
		EmitSoundToClient(victim,"vo/burp05.wav");
		
		//Update to the fact you killed yourself
		Update_DG_DB(victim,0,victim,2,0,2,WeaponName);
		
		//Display the window
		DrawPanelText(myPanel,"[+2]You committed suicide");
		DrawPanelText(myPanel,"--------------------------------");
		DrawPanelText(myPanel,"Total: 2");
		DrawPanelText(myPanel," ");
		Format(panelBuffer,sizeof(panelBuffer),"Total drinks this round: %d",TotalDrinks[victim]);
		DrawPanelText(myPanel,panelBuffer);
		DrawPanelItem(myPanel,"Close");
		SendPanelToClient(myPanel,victim,MenuHandler1,5);		
		CloseHandle(myPanel);
		return;
	}
	*/
	if (GetEventInt(event,"damagebits") & DMG_VEHICLE) {
		TotalDrinks[victim] += 6;
		PrintCenterText(victim,"DRINK SIX BITCH");
		PrintToChat(victim,"%sDon't get disTRACKted, drink 6",msgColor);	
		EmitSoundToClient(victim,"vo/burp05.wav");
		
		//Update to the train killed you
		Update_DG_DB(victim,0,victim,6,0,6,"train");
		
		//Display the window
		DrawPanelText(myPanel,"[+6]You got run over by a train");
		DrawPanelText(myPanel,"--------------------------------");
		DrawPanelText(myPanel,"Total: 6");
		DrawPanelText(myPanel," ");
		Format(panelBuffer,sizeof(panelBuffer),"Total drinks this round: %d",TotalDrinks[victim]);
		DrawPanelText(myPanel,panelBuffer);
		DrawPanelItem(myPanel,"Close");
		SendPanelToClient(myPanel,victim,MenuHandler1,5);		
		CloseHandle(myPanel);
		return;
	}
	
	//return if the server killed you
	if(attacker == 0)
		return;
	
	//If vic is DCGin and attacker isn't tell them to drink
	if (vicDCG && !atDG && !asDG) {
		//Increment drinks
		TotalDrinks[victim] += 1;
		PrintCenterText(victim,"DRINK ONE BITCH");
		PrintToChat(victim,"%sYou're DCGn, drink one",msgColor);		
		
		Update_DG_DB(0,0,victim,0,0,1,"");
		
		new String:say[255];
		Format(say, sizeof(say),"%s killed you, drink %d", attackName, 1);
		
		//EmitSoundToClient(victim,"misc/bottle-open-1.mp3");
		EmitSoundToClient(victim,"vo/burp05.wav");
		//Display the window
		DrawPanelText(myPanel,"[+1]You were killed while DCGing");
		DrawPanelText(myPanel,"--------------------------------");
		DrawPanelText(myPanel,"Total: 1");
		DrawPanelText(myPanel," ");
		Format(panelBuffer,sizeof(panelBuffer),"Total drinks this round: %d",TotalDrinks[victim]);
		DrawPanelText(myPanel,panelBuffer);
		DrawPanelItem(myPanel,"Close");
		SendPanelToClient(myPanel,victim,MenuHandler1,5);		
		CloseHandle(myPanel);
	}
	
	
	
	//Exit if attacker and assiter aren't dgin display building deaths if need be
	//or dead ringer deaths
	if (!atDG && !asDG) {
	    if (DeadRingerDrinks[victim] > 0) {
		    
			Format(panelBuffer,sizeof(panelBuffer),"[+%d]You would have drank at time of fake death(s)",DeadRingerDrinks[victim]);
			DrawPanelText(myPanel,panelBuffer);
			DrawPanelText(myPanel,"--------------------------------");
			Format(panelBuffer,sizeof(panelBuffer),"Total: %d",DeadRingerDrinks[victim]);
			DrawPanelText(myPanel, panelBuffer);
			DrawPanelText(myPanel," ");
			Format(panelBuffer,sizeof(panelBuffer),"Total drinks this round: %d",TotalDrinks[victim]);
			DrawPanelText(myPanel,panelBuffer);
			DrawPanelItem(myPanel,"Close");
			SendPanelToClient(myPanel,victim,MenuHandler1,5);		
			CloseHandle(myPanel);
			DeadRingerDrinks[victim] = 0;
		} 
		else if (BuildingDrinks[victim] > 0) {
			PrintCenterText(victim,"DRINK %d BITCH", BuildingDrinks[victim]);
			PrintToChat(victim,"%sYour buildings were killed last life drink %d",msgColor, BuildingDrinks[victim]);
			
			
			EmitSoundToClient(victim,"vo/burp05.wav");
			//Display the window
			Format(panelBuffer,sizeof(panelBuffer),"[+%d]Your buildings were killed that life",BuildingDrinks[victim]);
			DrawPanelText(myPanel,panelBuffer);
			DrawPanelText(myPanel,"--------------------------------");
			Format(panelBuffer,sizeof(panelBuffer),"Total: %d",BuildingDrinks[victim]);
			DrawPanelText(myPanel, panelBuffer);
			DrawPanelText(myPanel," ");
			Format(panelBuffer,sizeof(panelBuffer),"Total drinks this round: %d",TotalDrinks[victim]);
			DrawPanelText(myPanel,panelBuffer);
			DrawPanelItem(myPanel,"Close");
			SendPanelToClient(myPanel,victim,MenuHandler1,5);		
			CloseHandle(myPanel);
			BuildingDrinks[victim] = 0;
		}
		
		return;
	}
	

	//We don't care about the distinction between the two anymore
	vicDG = (vicDG || vicDCG);
	
	//Now the taunt for that player
	new String: steamID[32];
	GetClientAuthString(attacker,steamID,sizeof(steamID));
	new String:attaunt[100];
	GetTaunt(steamID,attaunt,sizeof(attaunt),false);
	
	new bool:tauntKill = (StrContains(WeaponName,"taunt",false) != -1);
	
	//Check for domination kill
	new bool:atDomRev = (flags & 1 || flags & 4);
	new bool:asDomRev = (flags & 2 || flags & 8) && asDG;

	if (buildingDeath) {
		TotalDrinks[victim] += 1;
		BuildingDrinks[victim] += 1;
		//should this update for dead ringer coward deaths?
		Update_DG_DB(atDG ? attacker : 0, asDG ? assister : 0, victim, 1, 1, 1, WeaponName);
		
		PrintToChat(attacker, "%sYou made %s drink %d. Good job!",msgColor, vicName, 1 );
		if (asDG)
			PrintToChat(assister,"%sYou made %s drink %d. Good job!",msgColor, vicName, 1 );
	} else 
	{
		
		new drinkCount = 0;
		new atDrinkCount = 0;
		new asDrinkCount = 0;
		new String: reason[100] = "";
		
		if (atDG) {
			//Add one for attacker drinks caused
			atDrinkCount += 1;
			drinkCount += 1;
			StrCat(reason,sizeof(reason), "killed by [DG]");
			Format(panelBuffer,sizeof(panelBuffer),"[+1]You were killed by %s",attackName);
			DrawPanelText(myPanel,panelBuffer);
		}
		
		//Add one for assiter
		if (asDG) {
			//Add one for assister drinks caused
			asDrinkCount += 1;
			drinkCount += 1;
			if (atDG)
				StrCat(reason,sizeof(reason),", kill assisted by [DG]");
			else
				StrCat(reason,sizeof(reason),"kill assisted by [DG]");
				
			Format(panelBuffer,sizeof(panelBuffer),"[+1]You were kill-assisted by %s",assistName);
			DrawPanelText(myPanel,panelBuffer);
		}
		
		//Add one if both gotcha
		if (asDG && atDG) {
			//Add one to both because the both helped with this one
			asDrinkCount+=1;
			atDrinkCount+=1;
			drinkCount  +=1;
			DrawPanelText(myPanel,"[+1] Drinker synergy bonus drink");
		}
		
		//Add weapon multipliers only if attacker was dg'n
		if (GetEventInt(event,"customkill") != TF_CUSTOM_BACKSTAB && atDG) {
			new multCount = getDrinkCount(WeaponName);
			if (multCount > 0) {
				drinkCount += multCount;
				//Add to attackers drink count
				atDrinkCount+=multCount;
				StrCat(reason,sizeof(reason),", killed using a special weapon");
				Format(panelBuffer,sizeof(panelBuffer),"[+%d]Killed with %s",multCount, WeaponName);
				DrawPanelText(myPanel,panelBuffer);
			}
		}
		
		//Double for taunt kill if attacker was dg'n
		if (tauntKill && atDG) {
			drinkCount += 6;
			atDrinkCount+=6;
			StrCat(reason,sizeof(reason),", killed by a taunt kill");
			DrawPanelText(myPanel,"[+6]Killed with a taunt kill");
		}
		
		//Double for attacker domination
		if (atDomRev & atDG) {
			drinkCount += 2;
			atDrinkCount+=2;
			StrCat(reason,sizeof(reason),", [DG] attacker dominated/revenged you");
			Format(panelBuffer,sizeof(panelBuffer),"[+2]You were dominated/revenged by %s",attackName);
			DrawPanelText(myPanel,panelBuffer);
		}
		
		//Double for assister domination
		//Double for codemonkey's bad spelling as well
		if (asDomRev && asDG) {
			drinkCount += 2;
			asDrinkCount+=2;
			StrCat(reason,sizeof(reason),", [DG] assister dominated/revenged you");
			Format(panelBuffer,sizeof(panelBuffer),"[+2]You were dominated/revenged by %s",assistName);
			DrawPanelText(myPanel,panelBuffer);
		}
		
		//Display how many drinks that have to take for their building deaths
		if (BuildingDrinks[victim] > 0) {
		    drinkCount += BuildingDrinks[victim];
			StrCat(reason,sizeof(reason),", [DG] killed your buildings last life");
			Format(panelBuffer,sizeof(panelBuffer),"[+%d]Your buildings were killed that life",BuildingDrinks[victim]);
			DrawPanelText(myPanel,panelBuffer);
		}
	
	    if (flags & TF_DEATHFLAG_DEADRINGER ) {
	        DeadRingerDrinks[victim] += drinkCount;
	        Format(panelBuffer,sizeof(panelBuffer),"...but you were dead ringing");
			DrawPanelText(myPanel,panelBuffer);
	        //because fake death
	        return;
	    }
	
	    //Display how many drinks that have to take for their fake deaths
		if (DeadRingerDrinks[victim] > 0) {
		    //a victim of his own deception
		    drinkCount += DeadRingerDrinks[victim];
			StrCat(reason,sizeof(reason),", you pretended to be killed by [DG]");
			Format(panelBuffer,sizeof(panelBuffer),"[+%d]You would have drank at time of fake death(s)",DeadRingerDrinks[victim]);
			DrawPanelText(myPanel,panelBuffer);
		}
	
		//Find the last , in the string and replace it with and
		new idx = FindCharInString(reason,',',true);
		if (idx != -1)
			ReplaceString(reason[idx],sizeof(reason),","," and")
		
		//Print out all this info to the victim
		PrintCenterText(victim,"%s DRINK %d BITCH",attaunt, drinkCount);
		PrintToChat(victim,"%sYou were %s drink %d",msgColor, reason, drinkCount);
			
		PrintToChat(attacker, "%sYou made %s drink %d. Good job!",msgColor, vicName,drinkCount);
		if (asDG)
			PrintToChat(assister,"%sYou made %s drink %d. Good job!",msgColor, vicName,drinkCount);
        if(!TEST_MODE) {
		    EmitSoundToClient(victim,"vo/burp05.wav");
		
		    Update_DG_DB(atDG ? attacker : 0, asDG ? assister : 0, victim, atDrinkCount, asDrinkCount,drinkCount, WeaponName);
        }
		TotalDrinks[victim] += drinkCount;
		
		DrawPanelText(myPanel,"--------------------------------");
		Format(panelBuffer,sizeof(panelBuffer),"Total: %d",drinkCount + BuildingDrinks[victim]);
		DrawPanelText(myPanel,panelBuffer);
		DrawPanelText(myPanel," ");
		Format(panelBuffer,sizeof(panelBuffer),"Total drinks this round: %d",TotalDrinks[victim]);
		DrawPanelText(myPanel,panelBuffer);
		DrawPanelItem(myPanel,"Close");
		SendPanelToClient(myPanel,victim,MenuHandler1,5);
		CloseHandle(myPanel);
	}
	

	if (!buildingDeath) //Means victim died, reset their building destroys
		BuildingDrinks[victim] = 0;
		
	if (!(flags & TF_DEATHFLAG_DEADRINGER )) //Means victim wasn't faking, reset their faker status
        DeadRingerDrinks[victim] = 0;

	
}

public getDrinkCount(name[]) {
    if(TEST_MODE) return 3;
	//Make sure not to read a bad map
	if (Weapons != INVALID_HANDLE) {
	    new wepBonus = 0;
	    GetTrieValue(Weapons,name,wepBonus);
		return wepBonus;
	}
	return 0;
}


public Event_PlayerSpawn(Handle:event, const String:name[], bool:dontBroadcast) {
    if(TEST_MODE) return;
	new client = GetClientOfUserId(GetEventInt(event, "userid"));
	new String:playerName[32];
	GetClientName(client, playerName,sizeof(playerName));
	
	//If they are DG'n put a sprite above their heads
	if (causesDrinks(playerName)) {
		if (GetClientTeam(client) == RED_TEAM)
			CreateSprite(client,DG_SPRITE_RED_VMT);
		else
			CreateSprite(client,DG_SPRITE_BLU_VMT);
	}
	
}

public Action:SetTransmit(entity, client) {
	//ATTN: THIS FUNCTION MAY HOLD THE BUG THAT CAUSES DG SPRITE AT SOME TEAMMATES
	//Do not display if it is the clients own sprite
	if (g_EntList[client] == entity)
		return Plugin_Handled;
		
	//Find target entities owner
	new playerLookingAt = 0;
	for(new i = 1; i <= MaxClients; i++)
	{
		if (g_EntList[i] == entity) {
			playerLookingAt = i;
			break;
		}
	}
	
	
	//If its a spy disguising or disguised or cloaked don't show it
	if (playerLookingAt > 0) {
		if (GetEntProp(playerLookingAt, Prop_Send, "m_nPlayerCond") & (TF2_PLAYERCOND_DISGUISING|TF2_PLAYERCOND_DISGUISED|TF2_PLAYERCOND_SPYCLOAK))
			return Plugin_Handled;
	}
	
	//If they are on the same team. Don't show it
	if (playerLookingAt > 0)
		if (GetClientTeam(client) == GetClientTeam(playerLookingAt))
			return Plugin_Handled;
	
	new String:playerName[32];
	GetClientName(client, playerName,sizeof(playerName));
	
	//Don't display to non DGers
	if (!causesDrinks(playerName))
		return Plugin_Handled;

	
	return Plugin_Continue;
}

public Change_Name(Handle:event, const String:name[], bool:dontBroadcast) 
{ 
	//Adjust sprites when players change their name
		
	decl String:newName[32]; GetEventString(event,"newname" , newName, sizeof(newName));
	decl String:oldName[32]; GetEventString(event,"oldname" , oldName,sizeof(oldName));
	new client = GetClientOfUserId(GetEventInt(event, "userid"));
	new bool:dg    = causesDrinks(newName);
	new bool:wasDG = causesDrinks(oldName);
	
	//If they are dead don't worry about it it will be taken care of at spawn
	if (!IsPlayerAlive(client))
		return;
	
	//Didn't actually leave or join game just leave
	if (dg && wasDG)
		return;
	
	//If they have started DGin
	if (dg && !TEST_MODE) {
		if (GetClientTeam(client) == RED_TEAM)
			CreateSprite(client,DG_SPRITE_RED_VMT);
		else if (GetClientTeam(client) == BLU_TEAM)
			CreateSprite(client,DG_SPRITE_BLU_VMT);
	} else if(g_EntList[client] > 0) {
		//If it has a sprite kill it
		KillSprite(client);
	}
	
	

}

public MenuHandler1(Handle:menu, MenuAction:action, param1, param2) {

}



public SentryDeath(Handle:event, const String:name[], bool:dontBroadcast) {
	Event_PlayerDeath(event,name,dontBroadcast);

}
public Event_Round_Win(Handle:event, const String:name[], bool:dontBroadcast) {
	new team = GetEventInt(event,"team")
	
	//Get all clients
	
	new bool:GetYaDikSuk = false;
	
	//See if there are any drinkers that round
	new bool:drinkers = false;
	for (new i = 1; i <= MaxClients; i++)
		if (TotalDrinks[i] > 0)
			drinkers = true;

	//Loop through all clients
	for (new i = 1; i <= MaxClients; i++) {
		//Make sure client is connected
		if (!IsClientInGame(i))
			continue;
		
		//Get player Name
		new String:playerName[32];
		GetClientName(i, playerName,sizeof(playerName));
		
		
		if (causesDrinks(playerName)){
			
			//See if HuntersPlaying
			new String:SteamID[32];
			GetClientAuthString(i,SteamID,sizeof(SteamID));
			//lolwut
			if (StrEqual(SteamID,"STEAM_0:1:6219443",false))
				GetYaDikSuk = true;
			
			if (!drinkers)
				PrintToChat(i, "%sNo one even drank that round, get killing you drunks",msgColor);
			//If on losing team
			if (GetClientTeam(i) != team)
				PrintCenterText(i,"Your team lost! Drink bitch");
		}
		if (DeadRingerDrinks[i] > 0) {
			PrintCenterText(i,"DRINK %d BITCH", DeadRingerDrinks[i]);
			PrintToChat(i,"%sYou were dead ringing you cheeky git %d",msgColor, DeadRingerDrinks[i]);
			
			new Handle:myPanel = CreatePanel();
			new String:panelBuffer[100];
			if(!TEST_MODE){
			    EmitSoundToClient(i,"vo/burp05.wav");
			}
			//Display the window
			Format(panelBuffer,sizeof(panelBuffer),"[+%d]You would have drank at time of fake death(s)",DeadRingerDrinks[i]);
			DrawPanelText(myPanel,panelBuffer);
			DrawPanelText(myPanel,"--------------------------------");
			Format(panelBuffer,sizeof(panelBuffer),"Total: %d",DeadRingerDrinks[i]);
			DrawPanelText(myPanel, panelBuffer);
			DrawPanelText(myPanel," ");
			Format(panelBuffer,sizeof(panelBuffer),"Total drinks this round: %d",TotalDrinks[i]);
			DrawPanelText(myPanel,panelBuffer);
			DrawPanelItem(myPanel,"Close");
			SendPanelToClient(myPanel,i,MenuHandler1,5);		
			CloseHandle(myPanel);
			DeadRingerDrinks[i] = 0;
		}
		else if (BuildingDrinks[i] > 0) {
			PrintCenterText(i,"DRINK %d BITCH", BuildingDrinks[i]);
			PrintToChat(i,"%sYour buildings were killed last life drink %d",msgColor, BuildingDrinks[i]);
			
			new Handle:myPanel = CreatePanel();
			new String:panelBuffer[100];
			if(!TEST_MODE){
			    EmitSoundToClient(i,"vo/burp05.wav");
			}
			//Display the window
			Format(panelBuffer,sizeof(panelBuffer),"[+%d]Your buildings were killed that life",BuildingDrinks[i]);
			DrawPanelText(myPanel,panelBuffer);
			DrawPanelText(myPanel,"--------------------------------");
			Format(panelBuffer,sizeof(panelBuffer),"Total: %d",BuildingDrinks[i]);
			DrawPanelText(myPanel, panelBuffer);
			DrawPanelText(myPanel," ");
			Format(panelBuffer,sizeof(panelBuffer),"Total drinks this round: %d",TotalDrinks[i]);
			DrawPanelText(myPanel,panelBuffer);
			DrawPanelItem(myPanel,"Close");
			SendPanelToClient(myPanel,i,MenuHandler1,5);		
			CloseHandle(myPanel);
			BuildingDrinks[i] = 0;
		}
	}
	
	
	
	
	if (GetYaDikSuk) 
		PrintCenterTextAll("GIT YA DIK SUK!");
	
	new String:TopDrinkers[(MAXPLAYERS + 1)*(66)];
	GetTopDrinkers(TopDrinkers,sizeof(TopDrinkers),5);
	//If there is drinkers that round print out the top 5 DGers
	if (drinkers)
		PrintToChatAll("%sTop 5 Drinkers:\n%s",msgColor, TopDrinkers);
	
	
	for (new start = 1; start <= max_clients; start++)
		TotalDrinks[start] = 0;
}

public OnClientDisconnect(client) {
	TotalDrinks[client]=0
	KillSprite(client);
}
 
public bool:SetTaunt(String:steamID[], String:taunt[]) {
	if(TEST_MODE) return false;
	//Change it to uppercase
	StringToUpper(taunt);
	//Change single quotes to 2 single quotes
	ReplaceString(taunt,strlen(taunt), "'","''");
	

	//Return if the db is closed
	if (db == INVALID_HANDLE)
		return false;
	
	//Create a query for the DB
	new String:strQuery[500];
	Format(strQuery,sizeof(strQuery), "SELECT taunt FROM DGtaunts WHERE Steam_ID = '%s'",steamID);
	SQL_LockDatabase(db);
	new Handle:query = SQL_Query(db,strQuery);
	SQL_UnlockDatabase(db);
	
	if (query == INVALID_HANDLE) {
		new String:error[100];
		SQL_GetError(db,error,sizeof(error));
		PrintToServer(error);
		return false;
		
	//That means that a row exists, so use update
	} else if(SQL_FetchRow(query)) {
		Format(strQuery,sizeof(strQuery),"UPDATE DGtaunts SET taunt = '%s' WHERE Steam_ID = '%s'", taunt, steamID);
	//Use insert
	} else {
		Format(strQuery,sizeof(strQuery),"INSERT INTO DGtaunts (Steam_ID, taunt) VALUES('%s', '%s')",steamID,taunt);
	}
	
	SQL_LockDatabase(db);
	if (!SQL_FastQuery(db,strQuery)) {
		new String:error[100];
		SQL_GetError(db,error,sizeof(error));
		PrintToServer(error);
		SQL_UnlockDatabase(db);
		return false;
	}
	SQL_UnlockDatabase(db);
	
	return true;
}

public Action:Update(client,args) {
	
	ReplyToCommand(client,"Updated on %s",UpdateDate)
	return Plugin_Handled
}

public Action:ReadList(client, start) {

	new max_clients = GetMaxClients()
	new clients[max_clients]
	
	for (new s = 0; s < max_clients; s++){
		clients[s] = s+1
	}
	
	SortCustom1D(clients,max_clients,sortDrinks)
	
	
	new String:name[64]
	new String:rtn[max_clients][1000];
	new numDgers = 0;
	for (new i = 1; i <= MaxClients; i++) {
		if (!IsClientInGame(clients[i]))
			continue;
			
		GetClientName(clients[i],name,sizeof(name))
		
		//Only count people with drinks
		if (TotalDrinks[clients[i]] > 0) {
			numDgers++;
			new String:strLine[510];
			
			Format(strLine,sizeof(strLine),"%s drank %d\n",name,TotalDrinks[clients[i]]);
				
			strcopy(rtn[numDgers - 1][0],1000,strLine);
		}
	}
	
	if (start < 0)
		start = 0;
	new stop = start + 5;
	if (stop > numDgers)
		stop = numDgers;
	
	new Handle:panel = CreatePanel();
	SetPanelTitle(panel, "Drinks this map");
	for (new i = start; i < stop; i++) {
		new String:value[1000]; Format(value, sizeof(value), "%d - %s", i+1, rtn[i]);
		DrawPanelText(panel, value);
	}
	
	if (start + 5 < numDgers)
		DrawPanelItem(panel, "Next");
	if (start > 0)
		DrawPanelItem(panel, "Prev");
	DrawPanelItem(panel, "Close");
	DrinkListStart[client] = start;
	SendPanelToClient(panel,client, DrinkListHandler, 20);
	CloseHandle(panel);
	/*
	new String:rtn[10200];
	GetTopDrinkers(rtn,sizeof(rtn),MaxClients);
	PrintToChat(client,"%s\n%s",msgColor,rtn);
	*/
	
	return Plugin_Handled;
}

public DrinkListHandler(Handle:menu, MenuAction:action, client, value) {
	
	new numDgers = 0;
	for (new i = 1; i <= MaxClients; i++) {
		if (!IsClientInGame(i))
			continue;
		
		if  (TotalDrinks[i] > 0)
			numDgers++;
	}
	if (action == MenuAction_Select) {
		new next = 0;
		new prev = 0;
		new close = 0;
		//Next and prev is on there
		if (DrinkListStart[client] > 0 && DrinkListStart[client] + 5 < numDgers) {
			prev = 2;
			next = 1;
			close = 3;
		} else if (DrinkListStart[client] == 0 && DrinkListStart[client] + 5 < numDgers) {
			next = 1;
			close = 2;
		} else if (DrinkListStart[client] > 0) {
			prev = 1;
			close = 2;
		} else
			close = 1;
		
		
		if (value == prev)
			ReadList(client, DrinkListStart[client]-5);
		if (value == next)
			ReadList(client, DrinkListStart[client] + 5);
		
	}
}

public GetTopDrinkers(String:buffer[], size, listmax) {
	new max_clients = GetMaxClients()
	new clients[max_clients]
	
	for (new start = 0; start < max_clients; start++){
		clients[start] = start+1
	}
	
	SortCustom1D(clients,max_clients,sortDrinks)
	
	
	new String:name[64]
	//rtn is only going to be as big as the number of players
	new String:rtn[(MAXPLAYERS + 1)*(sizeof(name)+4)]
	new numDgers = 0;
	for (new i = 1; i <= MaxClients; i++) {
		if (numDgers >= listmax)
			continue;
		
		if (!IsClientInGame(clients[i]))
			continue;
			
		GetClientName(clients[i],name,sizeof(name))
		
		//Only count people with drinks
		if (TotalDrinks[clients[i]] > 0) {
			numDgers++;
			new String:strLine[510];
			
			Format(strLine,sizeof(strLine),"%s drank %d\n",name,TotalDrinks[clients[i]]);
				
			StrCat(rtn,sizeof(rtn),strLine);
		}
	}
	
	strcopy(buffer,size,rtn);
}


public sortDrinks(elem1, elem2, const array[],Handle:hndl) {

	if (TotalDrinks[elem1] < TotalDrinks[elem2])
		return 1;
	if (TotalDrinks[elem1] == TotalDrinks[elem2])
		return 0;
	else
		return -1;

	
}
 
public GetTaunt(String:steamID[32], String:buf[], bufLen, bool:returnError) {
	if(TEST_MODE) strcopy(buf,bufLen,"LOOOOL TEST MODE");
	new String:rtn[100] = "";
	
	//Return if the db is closed
	if (db == INVALID_HANDLE)
		return;
	
	//Create a query for the DB
	new String:strQuery[250];
	Format(strQuery,sizeof(strQuery), "SELECT taunt FROM DGtaunts WHERE Steam_ID = '%s'",steamID);
	SQL_LockDatabase(db);
	new Handle:query = SQL_Query(db,strQuery);
	SQL_UnlockDatabase(db);
	
	if (query == INVALID_HANDLE && returnError) {
		
		SQL_GetError(db,rtn,sizeof(rtn));
		db = INVALID_HANDLE
	} else if(SQL_FetchRow(query)) {
		SQL_FetchString(query,0,rtn,sizeof(rtn));
	} else if(returnError) 
		strcopy(rtn,sizeof(rtn),"No taunt found, use dg_settaunt");

	strcopy(buf,bufLen,rtn);
}


public Update_DG_DB(attacker, assister, victim, at_drinks, as_drinks, vic_drinks, String: weapon[]) {
	//Return if the db is closed
	if (db == INVALID_HANDLE || TEST_MODE)
		return;
	
	new String:atName[100] = "NULL";
	new String:atSteam[50] = "NULL";
	new String:asName[100] = "NULL";
	new String:asSteam[50] = "NULL";
	new String:vicName[100] = "NULL";
	new String:vicSteam[50] = "NULL";

	/*
	0 IN attack_name VARCHAR(50),
	1 IN attack_steam_id VARCHAR(50),
	2 IN assist_name VARCHAR(50),
	3 IN assist_steam_id VARCHAR(50),
	4 IN victim_name VARCHAR(50),
	5 IN victim_steam_id VARCHAR(50),
	6 IN weapon VARCHAR(45),
	7 IN attack_drinks INT(11),
	8 IN assist_drinks INT(11),
	9 IN victim_drinks INT(11)
	*/
	
	
	if (attacker != 0) {
		GetClientName(attacker, atName,sizeof(atName)/2 - 2);
		ReplaceString(atName,sizeof(atName), "'","''");
		Format(atName, sizeof(atName),"'%s'",atName);
		
		
		GetClientAuthString(attacker,atSteam,sizeof(atSteam));
		Format(atSteam, sizeof(atSteam),"'%s'",atSteam);
	}
	if (assister != 0) {
		

		GetClientName(assister, asName,sizeof(asName)/2 - 2);
		ReplaceString(asName,sizeof(asName), "'","''");
		Format(asName, sizeof(asName),"'%s'",asName);
		
		GetClientAuthString(assister,asSteam,sizeof(asSteam));
		Format(asSteam, sizeof(asSteam),"'%s'",asSteam);
	}
	
	GetClientName(victim, vicName,sizeof(vicName)/2 - 2);
	ReplaceString(vicName,sizeof(vicName), "'","''");
	Format(vicName, sizeof(vicName),"'%s'",vicName);

	GetClientAuthString(victim,vicSteam,sizeof(vicSteam));
	Format(vicSteam, sizeof(vicSteam),"'%s'",vicSteam);
	
	new String:query[1000];
	SQL_LockDatabase(db);
	SQL_FastQuery(db,"SET NAMES UTF8");
	SQL_UnlockDatabase(db);
	Format(query,sizeof(query),"call add_drinks(%s, %s, %s, %s, %s, %s, '%s', %d, %d, %d);", atName, atSteam, asName, asSteam, vicName, vicSteam, weapon, at_drinks, as_drinks, vic_drinks)
	
	
	SQL_TQuery(db, T_SQLThreadReturn, query)
}

public T_SQLThreadReturn(Handle:owner, Handle:hndl, const String:error[], any:data) {
	if (hndl == INVALID_HANDLE)
	{
		tellCodeMonkey(error)
		LogError(error)
	}
}

public StringToUpper(String:str[]) {
	new i = 0;
	while (str[i] != '\0') {
		str[i] = CharToUpper(str[i]);
		i++;
	}
}

public DGStats(client, String:plrname[]) {
	
	new String:statsUrl[300];
	GetConVarString(g_hStatsURL,statsUrl,sizeof(statsUrl));
	
	new String:steam[32];	
	GetClientAuthString(client,steam,sizeof(steam));
	if (strlen(plrname) > 0) {
		new String: url[255];
		Format(url,sizeof(url),"%s/dgstats.php?name=%s",statsUrl, plrname);
		ShowMOTDPanel(client,"DG Stats Search",url, MOTDPANEL_TYPE_URL);
	}
	else {
		new String: url[255];
		Format(url,sizeof(url),"%s/dgstats.php?steam_id=%s",statsUrl, steam);
		ShowMOTDPanel(client,"DG Stats player",url, MOTDPANEL_TYPE_URL);
	}	
	
}

public bool:balanced() {
	new RedDGers;
	new BluDGers;
	
	for (new i = 1; i <= MaxClients; i ++){
		if (IsClientInGame(i)) {
			new String:name[255];
			GetClientName(i, name,sizeof(name));
			if (causesDrinks(name)) {
				if (GetClientTeam(i) == BLU_TEAM)
					BluDGers++;
				else if (GetClientTeam(i) == RED_TEAM)
					RedDGers++;
				
			}
			
		}
	}
	
	if (RedDGers == BluDGers || RedDGers == BluDGers +1 || RedDGers == BluDGers -1) {
		return true;
	}
	
	return false;
	
	
}
public Action:DGBalance(client1, args) {
	
	
	//Tally up the DGer's
	new Handle:RedIndex = CreateArray(ByteCountToCells(1));
	new Handle:BluIndex = CreateArray(ByteCountToCells(1));
	new Handle:NonDG = CreateArray(ByteCountToCells(1));

	for (new i = 1; i <= MaxClients; i ++){
		if (IsClientInGame(i)) {
			new String:name[255];
			GetClientName(i, name,sizeof(name));
			if (causesDrinks(name)) {
				if (GetClientTeam(i) == BLU_TEAM) 
					PushArrayCell(BluIndex,i);
				else if (GetClientTeam(i) == RED_TEAM)
					PushArrayCell(RedIndex,i);
			}
			else if (!IsClientObserver(i))
				PushArrayCell(NonDG, i);
			
		}
	}
	
	if (balanced()) {
		if (client1 != 0) {
			ReplyToCommand(client1, "Players are already balanced");
		}
		
		return Plugin_Handled;
	}
	

	
	//If red has more dgers
	if (GetArraySize(RedIndex) > GetArraySize(BluIndex)) {
		
		while (GetArraySize(NonDG) > 0 && !balanced()) {
			//Get a random non dger
			new clientindex = 0;
			if (GetArraySize(NonDG) > 0)
				clientindex = GetRandomInt(0, GetArraySize(NonDG) - 1);
			//Get a random DGer from Red
			new dgerindex = GetRandomInt(0, GetArraySize(RedIndex) - 1);
			
			
			new client = GetArrayCell(NonDG, clientindex);
			new dger = GetArrayCell(RedIndex, dgerindex);
			
			if (!IsClientConnected(client) || !IsClientInGame(client)){
				RemoveFromArray(NonDG, clientindex);
				
				continue;
			}
			
			//if they are DGin or on red team skip them
			if (FindValueInArray(RedIndex,client) != -1 || FindValueInArray(BluIndex,client) != -1 || GetClientTeam(client) == RED_TEAM){
				RemoveFromArray(NonDG, clientindex);
				continue;
			}
			
			
			new String:name[255];
			
			GetClientName(dger,name,sizeof(name));
			ChangeClientTeam(dger,BLU_TEAM);
			TF2_RespawnPlayer(dger);
			PrintToChatAll("%sMoved DGer %s to Blu team for DG balance",msgColor,name);
			
			GetClientName(client, name, sizeof(name));
			ChangeClientTeam(client, RED_TEAM);
			PrintToChatAll("%sMoved %s to Red team for DG balance",msgColor,name);
			TF2_RespawnPlayer(client);
			
			RemoveFromArray(RedIndex, dgerindex);
			
			RemoveFromArray(NonDG, clientindex);
		}
		
	}
	
	//If blu has more DGers
	if (GetArraySize(RedIndex) < GetArraySize(BluIndex)) {
		while (GetArraySize(NonDG) > 0 && !balanced()) {
			//Get a random non dger
			new clientindex = 0;
			if (GetArraySize(NonDG) > 0)
				clientindex = GetRandomInt(0, GetArraySize(NonDG) - 1);
			//Get a random DGer from Red
			new dgerindex = GetRandomInt(0, GetArraySize(BluIndex) - 1);
			
			
			new client = GetArrayCell(NonDG, clientindex);
			new dger = GetArrayCell(BluIndex, dgerindex);
			
			if (!IsClientConnected(client) || !IsClientInGame(client)){
				RemoveFromArray(NonDG, clientindex);
				
				continue;
			}
			
			//if they are DGin or on blue team skip them
			if (FindValueInArray(RedIndex,client) != -1 || FindValueInArray(BluIndex,client) != -1 || GetClientTeam(client) == BLU_TEAM){
				RemoveFromArray(NonDG, clientindex);
				
				continue;
			}
			
			
			new String:name[255];
			
			GetClientName(dger, name,sizeof(name));
			ChangeClientTeam(dger,RED_TEAM);
			TF2_RespawnPlayer(dger);
			PrintToChatAll("%sMoved DGer %s to RED team for DG balance",msgColor,name);
			
			GetClientName(client, name, sizeof(name));
			ChangeClientTeam(client, BLU_TEAM);
			PrintToChatAll("%sMoved %s to Blu team for DG balance",msgColor,name);
			TF2_RespawnPlayer(client);
			
			RemoveFromArray(BluIndex, dgerindex);
			
			RemoveFromArray(NonDG, clientindex);
		}
		
	}
	
	return Plugin_Handled;
}

public CheckForBalance(client) {
	return;
	//If the teams are already balanced or they have been balanced recently just return
	if (balanced())
		return;
	new String:name[255];
	GetClientName(client,name,sizeof(name));
	
	//If they are not DGing just return
	if (!causesDrinks(name))
		return;
	
	
	new plrTeam = GetClientTeam(client);
	
	//Tally up the DGer's
	new Handle:RedIndex = CreateArray(ByteCountToCells(1));
	new Handle:BluIndex = CreateArray(ByteCountToCells(1));
	for (new i = 1; i <= MaxClients; i ++){
		if (IsClientInGame(i)) {
			new String:plrname[255];
			GetClientName(i, plrname,sizeof(plrname));
			if (causesDrinks(plrname)) {
				if (GetClientTeam(i) == BLU_TEAM) 
					PushArrayCell(BluIndex,i);
				else if (GetClientTeam(i) == RED_TEAM)
					PushArrayCell(RedIndex,i);
				
				
			}
			
		}
	}
	
	
	//If this player is on the RED team and blue has more DGer's 
	if (plrTeam == RED_TEAM && GetArraySize(RedIndex) < GetArraySize(BluIndex)) {
		new randDGer = GetRandomInt(0, GetArraySize(BluIndex)-1);
		
		//Do not move non-dgers
		/*
		//Change the client to the team with more DGers
		ChangeClientTeam(client,BLU_TEAM);
		//TF2_RespawnPlayer(client);
		
		//Notify the game that they did that and tell the player that, that happend
		PrintToChatAll("%sMoved %s to BLU team for DG balance",msgColor,name);
		PrintCenterText(client,"You were switched to BLU team for drinking game balance");
		*/
		
		
		//Get the first DGer's name
		GetClientName(GetArrayCell(BluIndex,randDGer),name,sizeof(name));
		//Change his team
		ChangeClientTeam(GetArrayCell(BluIndex,randDGer),RED_TEAM);
		//Make him respawn instantly
		TF2_RespawnPlayer(GetArrayCell(BluIndex,randDGer));
		PrintToChatAll("%sMoved DGer %s to RED team for DG balance",msgColor,name);
		PrintCenterText(GetArrayCell(BluIndex,randDGer),"You were switched to RED team for drinking game balance");
	
	}
	else if(plrTeam == BLU_TEAM && GetArraySize(RedIndex) > GetArraySize(BluIndex)) {
		new randDGer = GetRandomInt(0, GetArraySize(RedIndex)-1);
		
		//Don't move non-dGER
		/*
		ChangeClientTeam(client,RED_TEAM);
		//TF2_RespawnPlayer(client);
		PrintToChatAll("%sMoved %s to RED team for DG balance",msgColor,name);
		PrintCenterText(client,"You were switched to RED team for drinking game balance");
		*/
		
		
		GetClientName(GetArrayCell(RedIndex,randDGer),name,sizeof(name));
		ChangeClientTeam(GetArrayCell(RedIndex,randDGer),BLU_TEAM);
		TF2_RespawnPlayer(GetArrayCell(RedIndex,randDGer));
		PrintToChatAll("%sMoved DGer %s to BLU team for DG balance",msgColor,name);
		PrintCenterText(GetArrayCell(RedIndex,randDGer),"You were switched to BLU team for drinking game balance");		
	}
	else
		return;
	
	
}


stock CreateSprite(iClient, String:sprite[])
{
	
	//Clean up any existing sprites and their parents:
	if (g_EntList[iClient] > 0 || g_EntParentList[iClient] > 0)
		KillSprite(iClient);
	
	
	//new String:strClient[64]; 
	//Format(strClient, sizeof(strClient), "client%i", iClient);
	//DispatchKeyValue(iClient, "targetname", strClient);
	
	
	new String:strParent[64];
	Format(strParent, sizeof(strParent), "prop%i", iClient);
	new parent = CreateEntityByName("prop_dynamic");
	DispatchKeyValue(parent, "targetname", strParent);
	//DispatchKeyValue(parent, "parentname", strClient);
	
	//Special values given by couch do reduce strain on server
	
	DispatchKeyValue(parent,"renderfx","0");
	DispatchKeyValue(parent,"damagetoenablemotion","0");
	DispatchKeyValue(parent,"forcetoenablemotion","0");
	DispatchKeyValue(parent,"Damagetype","0");
	DispatchKeyValue(parent,"disablereceiveshadows","1");
	DispatchKeyValue(parent,"massScale","0");
	DispatchKeyValue(parent,"nodamageforces","0");
	DispatchKeyValue(parent,"shadowcastdist","0");
	DispatchKeyValue(parent,"disableshadows","1");
	DispatchKeyValue(parent,"spawnflags","1670");
	DispatchKeyValue(parent,"model","models/player/medic_animations.mdl");
	DispatchKeyValue(parent,"PerformanceMode","1");
	DispatchKeyValue(parent,"rendermode","10");
	DispatchKeyValue(parent,"physdamagescale","0");
	DispatchKeyValue(parent,"physicsmode","2");
	
	
	DispatchSpawn(parent);
	
	//SetVariantString(strClient);
	//AcceptEntityInput(parent, "SetParent",parent, parent, 0);

	
	g_EntParentList[iClient] = parent;
	




	new ent = CreateEntityByName("env_sprite_oriented");
	
	if (ent)
	{
		new String:StrEntityName[64]; Format(StrEntityName, sizeof(StrEntityName), "ent_sprite_oriented_%i", ent);
		DispatchKeyValue(ent, "model", sprite);
		
		DispatchKeyValue(ent, "classname", "env_sprite_oriented");
		DispatchKeyValue(ent, "spawnflags", "1");
		DispatchKeyValue(ent, "scale", "0.1");
		DispatchKeyValue(ent, "rendermode", "1");
		DispatchKeyValue(ent, "rendercolor", "255 255 255");		
		DispatchKeyValue(ent, "targetname", StrEntityName);		
		DispatchKeyValue(ent, "parentname", strParent);
		
		
		DispatchSpawn(ent);
		
		
		//TeleportEntity(ent, vOrigin, NULL_VECTOR, NULL_VECTOR);
		g_EntList[iClient] = ent;
		
		
		SetVariantString(strParent);
		AcceptEntityInput(ent, "SetParent");

		SDKHook(ent, SDKHook_SetTransmit, SetTransmit);
	}
}

stock KillSprite(iClient)
{
	if (g_EntList[iClient] > 0 && IsValidEntity(g_EntList[iClient]))
	{
		AcceptEntityInput(g_EntList[iClient], "kill");
		g_EntList[iClient] = 0;
	}
	
	if (g_EntParentList[iClient] > 0 && IsValidEntity(g_EntParentList[iClient]))
	{
		AcceptEntityInput(g_EntParentList[iClient], "kill");
		g_EntParentList[iClient] = 0;
	}
}



public OnGameFrame()
{
	new ent, Float:vOrigin[3], Float:vVelocity[3];
	
	for(new i = 1; i <= MaxClients; i++)
	{
		if (!IsClientInGame(i)) continue;
		if ((ent = g_EntParentList[i]) > 0)
		{
			if (!IsValidEntity(ent))
				g_EntParentList[i] = 0;
			else
				if ((ent = EntRefToEntIndex(ent)) > 0)
				{
					GetClientEyePosition(i, vOrigin);
					vOrigin[2] += 25.0;
					GetEntDataVector(i, gVelocityOffset, vVelocity);
					TeleportEntity(ent, vOrigin, NULL_VECTOR,vVelocity);
					
				}
		}
	}
}

public tellCodeMonkey(const String:tellWhat[]) {
	for (new i = 1; i < MaxClients; i++){
		new String:steam[32];
		if (!IsClientInGame(i) || !IsClientConnected(i))
			continue;
		
		GetClientAuthString(i,steam,sizeof(steam));
		if (StrEqual(steam,"STEAM_0:0:20604342",false)) {
			PrintCenterText(i,"OMG LOOK AT CHAT THERES AN ERROR");
			PrintToChat(i,"%s%s",msgColor,tellWhat);
		}
		
	}
}
